// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-assisted form to find rare medicines.
 *
 * - findRareMedicines - A function that handles the rare medicine search process.
 * - FindRareMedicinesInput - The input type for the findRareMedicines function.
 * - FindRareMedicinesOutput - The return type for the findRareMedicines function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FindRareMedicinesInputSchema = z.object({
  medicineName: z.string().describe('The name of the rare medicine to find.'),
  patientCondition: z.string().describe('The patient condition for which the medicine is needed.'),
  additionalDetails: z
    .string()
    .optional()
    .describe('Any additional details about the patient or the medicine requirements.'),
});

export type FindRareMedicinesInput = z.infer<typeof FindRareMedicinesInputSchema>;

const FindRareMedicinesOutputSchema = z.object({
  medicineInfo: z.string().describe('Information about the rare medicine, including its uses and availability.'),
  availabilityStatus: z.string().describe('The current availability status of the medicine.'),
  potentialVendors: z.string().describe('A list of potential vendors or sources for the medicine.'),
  suggestions: z.string().describe('AI-generated suggestions based on the medicine and patient history'),
});

export type FindRareMedicinesOutput = z.infer<typeof FindRareMedicinesOutputSchema>;

export async function findRareMedicines(input: FindRareMedicinesInput): Promise<FindRareMedicinesOutput> {
  return findRareMedicinesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'findRareMedicinesPrompt',
  input: {schema: FindRareMedicinesInputSchema},
  output: {schema: FindRareMedicinesOutputSchema},
  prompt: `You are an AI assistant specialized in finding information about rare medicines.

  Based on the provided information, research the medicine and its availability. Provide details on its uses, current availability status, and potential vendors.

  Medicine Name: {{{medicineName}}}
  Patient Condition: {{{patientCondition}}}
  Additional Details: {{{additionalDetails}}}

  Make sure to suggest vendors, if any are known, and any other helpful information.
  `,
});

const findRareMedicinesFlow = ai.defineFlow(
  {
    name: 'findRareMedicinesFlow',
    inputSchema: FindRareMedicinesInputSchema,
    outputSchema: FindRareMedicinesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
